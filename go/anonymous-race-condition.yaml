rules:
- id: anonymous-race-condition
  message: >-
    Possible race condition due to memory aliasing of variable `$X`
  languages: [go]
  severity: ERROR
  metadata:
    category: security
    cwe: "CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"
    subcategory: [vuln]
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology: [--no-technology--]
    description: "Race conditions within anonymous goroutines"
    references:
      - https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables

  patterns:
    - pattern-either: 
      - pattern: |
          for $Y, $X := range ... {
            ...
            go func(...){
              ...
              $FOO(..., $X, ...)
              ...
            }(...)
            ...
          }
      - pattern: |
          for $Y, $X := range ... {
            ...
            go func(...){
              ...
              $X(...)
              ...
            }(...)
            ...
          }
      - pattern: |
          for $X:=...;$Y;$Z {
            ...
            go func(...) {
              ...
              $FOO(..., $X,...)
              ...
            }(...)
            ...
          }
      - pattern: |
          for $Y, $X := range ... {
            ...
            go func(...){
              ...
              $X. ... .$M(...)
              ...
            }(...)
            ...
          }
    - pattern-not: |
        for $X, $Y := range ... {
          ...
          go func(..., $V, ...){
            ...
            $FOO(..., $V, ...)
            ...
          }(..., $Y, ...)
          ...
        }
    - pattern-not: |
        for $Y, $X := range ... {
          ...
          go func(..., $CP, ...){
            ...
            $CP(...)
            ...
          }($X)
          ...
        }
    - pattern-not: |
        for $X:=...;$Y;$Z {
          ...
          go func(..., $V, ...) {
            ...
            $FOO(..., $V,...)
            ...
          }(..., $X, ...)
          ...
        }
    - pattern-not: |
        for $X, $Y := range ... {
          ...
          $COPY := $Y
          ...
          go func(...){
            ...
            $FOO(..., $COPY, ...)
            ...
          }(...)
          ...
        }
    - pattern-not: |
        for $X:=...;$Y;$Z {
          ...
          $COPY := $X
          ...
          go func(...) {
            ...
            $FOO(..., $COPY,...)
            ...
          }(...)
          ...
        }
